/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_sinowave_ddp_Apm */

#ifndef _Included_com_sinowave_ddp_Apm
#define _Included_com_sinowave_ddp_Apm
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    nativeCreateApmInstance
 * Signature: (ZZZZZZZ)Z
 */
JNIEXPORT jboolean JNICALL Java_com_sinowave_ddp_Apm_nativeCreateApmInstance
  (JNIEnv *, jobject, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    nativeFreeApmInstance
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_sinowave_ddp_Apm_nativeFreeApmInstance
  (JNIEnv *, jobject);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    high_pass_filter_enable
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_high_1pass_1filter_1enable
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    aec_enable
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_aec_1enable
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    aec_set_suppression_level
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_aec_1set_1suppression_1level
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    aec_clock_drift_compensation_enable
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_aec_1clock_1drift_1compensation_1enable
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    aecm_enable
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_aecm_1enable
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    aecm_set_suppression_level
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_aecm_1set_1suppression_1level
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    ns_enable
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_ns_1enable
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    ns_set_level
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_ns_1set_1level
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_enable
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1enable
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_set_target_level_dbfs
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1set_1target_1level_1dbfs
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_set_compression_gain_db
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1set_1compression_1gain_1db
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_enable_limiter
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1enable_1limiter
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_set_analog_level_limits
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1set_1analog_1level_1limits
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_set_mode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1set_1mode
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_set_stream_analog_level
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1set_1stream_1analog_1level
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    agc_stream_analog_level
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_agc_1stream_1analog_1level
  (JNIEnv *, jobject);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    vad_enable
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_vad_1enable
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    vad_set_likelihood
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_vad_1set_1likelihood
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    vad_stream_has_voice
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_sinowave_ddp_Apm_vad_1stream_1has_1voice
  (JNIEnv *, jobject);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    ProcessStream
 * Signature: ([SI)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_ProcessStream
  (JNIEnv *, jobject, jshortArray, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    ProcessReverseStream
 * Signature: ([SI)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_ProcessReverseStream
  (JNIEnv *, jobject, jshortArray, jint);

/*
 * Class:     com_sinowave_ddp_Apm
 * Method:    set_stream_delay_ms
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_sinowave_ddp_Apm_set_1stream_1delay_1ms
  (JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
